// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: token/v1/command.proto

package tokenv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	TokenCommandService_Generate_FullMethodName = "/rashop.token.v1.TokenCommandService/Generate"
	TokenCommandService_Validate_FullMethodName = "/rashop.token.v1.TokenCommandService/Validate"
)

// TokenCommandServiceClient is the client API for TokenCommandService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TokenCommandServiceClient interface {
	Generate(ctx context.Context, in *GenerateTokenRequest, opts ...grpc.CallOption) (*GenerateTokenResponse, error)
	Validate(ctx context.Context, in *ValidateTokenRequest, opts ...grpc.CallOption) (*ValidateTokenResponse, error)
}

type tokenCommandServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTokenCommandServiceClient(cc grpc.ClientConnInterface) TokenCommandServiceClient {
	return &tokenCommandServiceClient{cc}
}

func (c *tokenCommandServiceClient) Generate(ctx context.Context, in *GenerateTokenRequest, opts ...grpc.CallOption) (*GenerateTokenResponse, error) {
	out := new(GenerateTokenResponse)
	err := c.cc.Invoke(ctx, TokenCommandService_Generate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tokenCommandServiceClient) Validate(ctx context.Context, in *ValidateTokenRequest, opts ...grpc.CallOption) (*ValidateTokenResponse, error) {
	out := new(ValidateTokenResponse)
	err := c.cc.Invoke(ctx, TokenCommandService_Validate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TokenCommandServiceServer is the server API for TokenCommandService service.
// All implementations must embed UnimplementedTokenCommandServiceServer
// for forward compatibility
type TokenCommandServiceServer interface {
	Generate(context.Context, *GenerateTokenRequest) (*GenerateTokenResponse, error)
	Validate(context.Context, *ValidateTokenRequest) (*ValidateTokenResponse, error)
	mustEmbedUnimplementedTokenCommandServiceServer()
}

// UnimplementedTokenCommandServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTokenCommandServiceServer struct {
}

func (UnimplementedTokenCommandServiceServer) Generate(context.Context, *GenerateTokenRequest) (*GenerateTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Generate not implemented")
}
func (UnimplementedTokenCommandServiceServer) Validate(context.Context, *ValidateTokenRequest) (*ValidateTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Validate not implemented")
}
func (UnimplementedTokenCommandServiceServer) mustEmbedUnimplementedTokenCommandServiceServer() {}

// UnsafeTokenCommandServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TokenCommandServiceServer will
// result in compilation errors.
type UnsafeTokenCommandServiceServer interface {
	mustEmbedUnimplementedTokenCommandServiceServer()
}

func RegisterTokenCommandServiceServer(s grpc.ServiceRegistrar, srv TokenCommandServiceServer) {
	s.RegisterService(&TokenCommandService_ServiceDesc, srv)
}

func _TokenCommandService_Generate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TokenCommandServiceServer).Generate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TokenCommandService_Generate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TokenCommandServiceServer).Generate(ctx, req.(*GenerateTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TokenCommandService_Validate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TokenCommandServiceServer).Validate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TokenCommandService_Validate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TokenCommandServiceServer).Validate(ctx, req.(*ValidateTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TokenCommandService_ServiceDesc is the grpc.ServiceDesc for TokenCommandService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TokenCommandService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rashop.token.v1.TokenCommandService",
	HandlerType: (*TokenCommandServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Generate",
			Handler:    _TokenCommandService_Generate_Handler,
		},
		{
			MethodName: "Validate",
			Handler:    _TokenCommandService_Validate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "token/v1/command.proto",
}

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: mailer/v1/command.proto

package mailerv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	MailerCommandService_Send_FullMethodName   = "/rashop.mailer.v1.MailerCommandService/Send"
	MailerCommandService_Delete_FullMethodName = "/rashop.mailer.v1.MailerCommandService/Delete"
)

// MailerCommandServiceClient is the client API for MailerCommandService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MailerCommandServiceClient interface {
	Send(ctx context.Context, in *SendMailRequest, opts ...grpc.CallOption) (*SendMailResponse, error)
	Delete(ctx context.Context, in *DeleteMailRequest, opts ...grpc.CallOption) (*DeleteMailResponse, error)
}

type mailerCommandServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMailerCommandServiceClient(cc grpc.ClientConnInterface) MailerCommandServiceClient {
	return &mailerCommandServiceClient{cc}
}

func (c *mailerCommandServiceClient) Send(ctx context.Context, in *SendMailRequest, opts ...grpc.CallOption) (*SendMailResponse, error) {
	out := new(SendMailResponse)
	err := c.cc.Invoke(ctx, MailerCommandService_Send_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mailerCommandServiceClient) Delete(ctx context.Context, in *DeleteMailRequest, opts ...grpc.CallOption) (*DeleteMailResponse, error) {
	out := new(DeleteMailResponse)
	err := c.cc.Invoke(ctx, MailerCommandService_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MailerCommandServiceServer is the server API for MailerCommandService service.
// All implementations must embed UnimplementedMailerCommandServiceServer
// for forward compatibility
type MailerCommandServiceServer interface {
	Send(context.Context, *SendMailRequest) (*SendMailResponse, error)
	Delete(context.Context, *DeleteMailRequest) (*DeleteMailResponse, error)
	mustEmbedUnimplementedMailerCommandServiceServer()
}

// UnimplementedMailerCommandServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMailerCommandServiceServer struct {
}

func (UnimplementedMailerCommandServiceServer) Send(context.Context, *SendMailRequest) (*SendMailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Send not implemented")
}
func (UnimplementedMailerCommandServiceServer) Delete(context.Context, *DeleteMailRequest) (*DeleteMailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedMailerCommandServiceServer) mustEmbedUnimplementedMailerCommandServiceServer() {}

// UnsafeMailerCommandServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MailerCommandServiceServer will
// result in compilation errors.
type UnsafeMailerCommandServiceServer interface {
	mustEmbedUnimplementedMailerCommandServiceServer()
}

func RegisterMailerCommandServiceServer(s grpc.ServiceRegistrar, srv MailerCommandServiceServer) {
	s.RegisterService(&MailerCommandService_ServiceDesc, srv)
}

func _MailerCommandService_Send_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendMailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MailerCommandServiceServer).Send(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MailerCommandService_Send_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MailerCommandServiceServer).Send(ctx, req.(*SendMailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MailerCommandService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MailerCommandServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MailerCommandService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MailerCommandServiceServer).Delete(ctx, req.(*DeleteMailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MailerCommandService_ServiceDesc is the grpc.ServiceDesc for MailerCommandService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MailerCommandService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rashop.mailer.v1.MailerCommandService",
	HandlerType: (*MailerCommandServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Send",
			Handler:    _MailerCommandService_Send_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _MailerCommandService_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mailer/v1/command.proto",
}

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: customer/v1/query.proto

package customerv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	CustomerQueryService_Get_FullMethodName           = "/rashop.customer.v1.CustomerQueryService/Get"
	CustomerQueryService_FindByIds_FullMethodName     = "/rashop.customer.v1.CustomerQueryService/FindByIds"
	CustomerQueryService_FindAddresses_FullMethodName = "/rashop.customer.v1.CustomerQueryService/FindAddresses"
	CustomerQueryService_FindVouchers_FullMethodName  = "/rashop.customer.v1.CustomerQueryService/FindVouchers"
)

// CustomerQueryServiceClient is the client API for CustomerQueryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CustomerQueryServiceClient interface {
	Get(ctx context.Context, in *GetCustomersRequest, opts ...grpc.CallOption) (*GetCustomerResponse, error)
	FindByIds(ctx context.Context, in *FindCustomerByIdsRequest, opts ...grpc.CallOption) (*FindCustomerByIdsResponse, error)
	FindAddresses(ctx context.Context, in *FindCustomerAddressesRequest, opts ...grpc.CallOption) (*FindCustomerAddressesResponse, error)
	FindVouchers(ctx context.Context, in *FindCustomerVouchersRequest, opts ...grpc.CallOption) (*FindCustomerVouchersResponse, error)
}

type customerQueryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCustomerQueryServiceClient(cc grpc.ClientConnInterface) CustomerQueryServiceClient {
	return &customerQueryServiceClient{cc}
}

func (c *customerQueryServiceClient) Get(ctx context.Context, in *GetCustomersRequest, opts ...grpc.CallOption) (*GetCustomerResponse, error) {
	out := new(GetCustomerResponse)
	err := c.cc.Invoke(ctx, CustomerQueryService_Get_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerQueryServiceClient) FindByIds(ctx context.Context, in *FindCustomerByIdsRequest, opts ...grpc.CallOption) (*FindCustomerByIdsResponse, error) {
	out := new(FindCustomerByIdsResponse)
	err := c.cc.Invoke(ctx, CustomerQueryService_FindByIds_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerQueryServiceClient) FindAddresses(ctx context.Context, in *FindCustomerAddressesRequest, opts ...grpc.CallOption) (*FindCustomerAddressesResponse, error) {
	out := new(FindCustomerAddressesResponse)
	err := c.cc.Invoke(ctx, CustomerQueryService_FindAddresses_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerQueryServiceClient) FindVouchers(ctx context.Context, in *FindCustomerVouchersRequest, opts ...grpc.CallOption) (*FindCustomerVouchersResponse, error) {
	out := new(FindCustomerVouchersResponse)
	err := c.cc.Invoke(ctx, CustomerQueryService_FindVouchers_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CustomerQueryServiceServer is the server API for CustomerQueryService service.
// All implementations must embed UnimplementedCustomerQueryServiceServer
// for forward compatibility
type CustomerQueryServiceServer interface {
	Get(context.Context, *GetCustomersRequest) (*GetCustomerResponse, error)
	FindByIds(context.Context, *FindCustomerByIdsRequest) (*FindCustomerByIdsResponse, error)
	FindAddresses(context.Context, *FindCustomerAddressesRequest) (*FindCustomerAddressesResponse, error)
	FindVouchers(context.Context, *FindCustomerVouchersRequest) (*FindCustomerVouchersResponse, error)
	mustEmbedUnimplementedCustomerQueryServiceServer()
}

// UnimplementedCustomerQueryServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCustomerQueryServiceServer struct {
}

func (UnimplementedCustomerQueryServiceServer) Get(context.Context, *GetCustomersRequest) (*GetCustomerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedCustomerQueryServiceServer) FindByIds(context.Context, *FindCustomerByIdsRequest) (*FindCustomerByIdsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindByIds not implemented")
}
func (UnimplementedCustomerQueryServiceServer) FindAddresses(context.Context, *FindCustomerAddressesRequest) (*FindCustomerAddressesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindAddresses not implemented")
}
func (UnimplementedCustomerQueryServiceServer) FindVouchers(context.Context, *FindCustomerVouchersRequest) (*FindCustomerVouchersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindVouchers not implemented")
}
func (UnimplementedCustomerQueryServiceServer) mustEmbedUnimplementedCustomerQueryServiceServer() {}

// UnsafeCustomerQueryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CustomerQueryServiceServer will
// result in compilation errors.
type UnsafeCustomerQueryServiceServer interface {
	mustEmbedUnimplementedCustomerQueryServiceServer()
}

func RegisterCustomerQueryServiceServer(s grpc.ServiceRegistrar, srv CustomerQueryServiceServer) {
	s.RegisterService(&CustomerQueryService_ServiceDesc, srv)
}

func _CustomerQueryService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCustomersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerQueryServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CustomerQueryService_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerQueryServiceServer).Get(ctx, req.(*GetCustomersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerQueryService_FindByIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindCustomerByIdsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerQueryServiceServer).FindByIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CustomerQueryService_FindByIds_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerQueryServiceServer).FindByIds(ctx, req.(*FindCustomerByIdsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerQueryService_FindAddresses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindCustomerAddressesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerQueryServiceServer).FindAddresses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CustomerQueryService_FindAddresses_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerQueryServiceServer).FindAddresses(ctx, req.(*FindCustomerAddressesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerQueryService_FindVouchers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindCustomerVouchersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerQueryServiceServer).FindVouchers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CustomerQueryService_FindVouchers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerQueryServiceServer).FindVouchers(ctx, req.(*FindCustomerVouchersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CustomerQueryService_ServiceDesc is the grpc.ServiceDesc for CustomerQueryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CustomerQueryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rashop.customer.v1.CustomerQueryService",
	HandlerType: (*CustomerQueryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _CustomerQueryService_Get_Handler,
		},
		{
			MethodName: "FindByIds",
			Handler:    _CustomerQueryService_FindByIds_Handler,
		},
		{
			MethodName: "FindAddresses",
			Handler:    _CustomerQueryService_FindAddresses_Handler,
		},
		{
			MethodName: "FindVouchers",
			Handler:    _CustomerQueryService_FindVouchers_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "customer/v1/query.proto",
}

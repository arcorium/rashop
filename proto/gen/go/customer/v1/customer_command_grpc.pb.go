// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: customer/v1/customer_command.proto

package customerv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	CustomerCommandService_AddAddress_FullMethodName                = "/rashop.customer.v1.CustomerCommandService/AddAddress"
	CustomerCommandService_AddVoucher_FullMethodName                = "/rashop.customer.v1.CustomerCommandService/AddVoucher"
	CustomerCommandService_Create_FullMethodName                    = "/rashop.customer.v1.CustomerCommandService/Create"
	CustomerCommandService_DeleteAddress_FullMethodName             = "/rashop.customer.v1.CustomerCommandService/DeleteAddress"
	CustomerCommandService_DeleteVoucher_FullMethodName             = "/rashop.customer.v1.CustomerCommandService/DeleteVoucher"
	CustomerCommandService_Disable_FullMethodName                   = "/rashop.customer.v1.CustomerCommandService/Disable"
	CustomerCommandService_Enable_FullMethodName                    = "/rashop.customer.v1.CustomerCommandService/Enable"
	CustomerCommandService_ForgotPasswordInstantiate_FullMethodName = "/rashop.customer.v1.CustomerCommandService/ForgotPasswordInstantiate"
	CustomerCommandService_ResetPassword_FullMethodName             = "/rashop.customer.v1.CustomerCommandService/ResetPassword"
	CustomerCommandService_SetDefaultAddress_FullMethodName         = "/rashop.customer.v1.CustomerCommandService/SetDefaultAddress"
	CustomerCommandService_UpdateAddress_FullMethodName             = "/rashop.customer.v1.CustomerCommandService/UpdateAddress"
	CustomerCommandService_SetBalance_FullMethodName                = "/rashop.customer.v1.CustomerCommandService/SetBalance"
	CustomerCommandService_ModifyBalance_FullMethodName             = "/rashop.customer.v1.CustomerCommandService/ModifyBalance"
	CustomerCommandService_Update_FullMethodName                    = "/rashop.customer.v1.CustomerCommandService/Update"
	CustomerCommandService_UpdatePassword_FullMethodName            = "/rashop.customer.v1.CustomerCommandService/UpdatePassword"
	CustomerCommandService_UpdatePhoto_FullMethodName               = "/rashop.customer.v1.CustomerCommandService/UpdatePhoto"
	CustomerCommandService_UpdateVoucher_FullMethodName             = "/rashop.customer.v1.CustomerCommandService/UpdateVoucher"
	CustomerCommandService_VerifyEmail_FullMethodName               = "/rashop.customer.v1.CustomerCommandService/VerifyEmail"
	CustomerCommandService_VerifyEmailInstantiate_FullMethodName    = "/rashop.customer.v1.CustomerCommandService/VerifyEmailInstantiate"
)

// CustomerCommandServiceClient is the client API for CustomerCommandService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CustomerCommandServiceClient interface {
	AddAddress(ctx context.Context, in *AddCustomerAddressRequest, opts ...grpc.CallOption) (*AddCustomerAddressResponse, error)
	AddVoucher(ctx context.Context, in *AddCustomerVoucherRequest, opts ...grpc.CallOption) (*AddCustomerVoucherResponse, error)
	Create(ctx context.Context, in *CreateCustomerRequest, opts ...grpc.CallOption) (*CreateCustomerResponse, error)
	DeleteAddress(ctx context.Context, in *DeleteCustomerAddressRequest, opts ...grpc.CallOption) (*DeleteCustomerAddressResponse, error)
	DeleteVoucher(ctx context.Context, in *DeleteCustomerVoucherRequest, opts ...grpc.CallOption) (*DeleteCustomerVoucherResponse, error)
	Disable(ctx context.Context, in *DisableCustomerRequest, opts ...grpc.CallOption) (*DisableCustomerResponse, error)
	Enable(ctx context.Context, in *EnableCustomerRequest, opts ...grpc.CallOption) (*EnableCustomerResponse, error)
	ForgotPasswordInstantiate(ctx context.Context, in *ForgotCustomerPasswordRequest, opts ...grpc.CallOption) (*ForgotCustomerPasswordResponse, error)
	ResetPassword(ctx context.Context, in *ResetCustomerPasswordRequest, opts ...grpc.CallOption) (*ResetCustomerPasswordResponse, error)
	SetDefaultAddress(ctx context.Context, in *SetCustomerDefaultAddressRequest, opts ...grpc.CallOption) (*SetCustomerDefaultAddressResponse, error)
	UpdateAddress(ctx context.Context, in *UpdateCustomerAddressRequest, opts ...grpc.CallOption) (*UpdateCustomerAddressResponse, error)
	SetBalance(ctx context.Context, in *SetCustomerBalanceRequest, opts ...grpc.CallOption) (*SetCustomerBalanceResponse, error)
	ModifyBalance(ctx context.Context, in *ModifyCustomerBalanceRequest, opts ...grpc.CallOption) (*ModifyCustomerBalanceResponse, error)
	Update(ctx context.Context, in *UpdateCustomerRequest, opts ...grpc.CallOption) (*UpdateCustomerResponse, error)
	UpdatePassword(ctx context.Context, in *UpdateCustomerPasswordRequest, opts ...grpc.CallOption) (*UpdateCustomerPasswordResponse, error)
	UpdatePhoto(ctx context.Context, in *UpdateCustomerPhotoRequest, opts ...grpc.CallOption) (*UpdateCustomerPhotoResponse, error)
	UpdateVoucher(ctx context.Context, in *UpdateCustomerVoucherRequest, opts ...grpc.CallOption) (*UpdateCustomerVoucherResponse, error)
	VerifyEmail(ctx context.Context, in *VerifyCustomerEmailRequest, opts ...grpc.CallOption) (*VerifyCustomerEmailResponse, error)
	VerifyEmailInstantiate(ctx context.Context, in *VerifyCustomerEmailInstantiateRequest, opts ...grpc.CallOption) (*VerifyCustomerEmailInstantiateResponse, error)
}

type customerCommandServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCustomerCommandServiceClient(cc grpc.ClientConnInterface) CustomerCommandServiceClient {
	return &customerCommandServiceClient{cc}
}

func (c *customerCommandServiceClient) AddAddress(ctx context.Context, in *AddCustomerAddressRequest, opts ...grpc.CallOption) (*AddCustomerAddressResponse, error) {
	out := new(AddCustomerAddressResponse)
	err := c.cc.Invoke(ctx, CustomerCommandService_AddAddress_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerCommandServiceClient) AddVoucher(ctx context.Context, in *AddCustomerVoucherRequest, opts ...grpc.CallOption) (*AddCustomerVoucherResponse, error) {
	out := new(AddCustomerVoucherResponse)
	err := c.cc.Invoke(ctx, CustomerCommandService_AddVoucher_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerCommandServiceClient) Create(ctx context.Context, in *CreateCustomerRequest, opts ...grpc.CallOption) (*CreateCustomerResponse, error) {
	out := new(CreateCustomerResponse)
	err := c.cc.Invoke(ctx, CustomerCommandService_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerCommandServiceClient) DeleteAddress(ctx context.Context, in *DeleteCustomerAddressRequest, opts ...grpc.CallOption) (*DeleteCustomerAddressResponse, error) {
	out := new(DeleteCustomerAddressResponse)
	err := c.cc.Invoke(ctx, CustomerCommandService_DeleteAddress_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerCommandServiceClient) DeleteVoucher(ctx context.Context, in *DeleteCustomerVoucherRequest, opts ...grpc.CallOption) (*DeleteCustomerVoucherResponse, error) {
	out := new(DeleteCustomerVoucherResponse)
	err := c.cc.Invoke(ctx, CustomerCommandService_DeleteVoucher_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerCommandServiceClient) Disable(ctx context.Context, in *DisableCustomerRequest, opts ...grpc.CallOption) (*DisableCustomerResponse, error) {
	out := new(DisableCustomerResponse)
	err := c.cc.Invoke(ctx, CustomerCommandService_Disable_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerCommandServiceClient) Enable(ctx context.Context, in *EnableCustomerRequest, opts ...grpc.CallOption) (*EnableCustomerResponse, error) {
	out := new(EnableCustomerResponse)
	err := c.cc.Invoke(ctx, CustomerCommandService_Enable_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerCommandServiceClient) ForgotPasswordInstantiate(ctx context.Context, in *ForgotCustomerPasswordRequest, opts ...grpc.CallOption) (*ForgotCustomerPasswordResponse, error) {
	out := new(ForgotCustomerPasswordResponse)
	err := c.cc.Invoke(ctx, CustomerCommandService_ForgotPasswordInstantiate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerCommandServiceClient) ResetPassword(ctx context.Context, in *ResetCustomerPasswordRequest, opts ...grpc.CallOption) (*ResetCustomerPasswordResponse, error) {
	out := new(ResetCustomerPasswordResponse)
	err := c.cc.Invoke(ctx, CustomerCommandService_ResetPassword_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerCommandServiceClient) SetDefaultAddress(ctx context.Context, in *SetCustomerDefaultAddressRequest, opts ...grpc.CallOption) (*SetCustomerDefaultAddressResponse, error) {
	out := new(SetCustomerDefaultAddressResponse)
	err := c.cc.Invoke(ctx, CustomerCommandService_SetDefaultAddress_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerCommandServiceClient) UpdateAddress(ctx context.Context, in *UpdateCustomerAddressRequest, opts ...grpc.CallOption) (*UpdateCustomerAddressResponse, error) {
	out := new(UpdateCustomerAddressResponse)
	err := c.cc.Invoke(ctx, CustomerCommandService_UpdateAddress_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerCommandServiceClient) SetBalance(ctx context.Context, in *SetCustomerBalanceRequest, opts ...grpc.CallOption) (*SetCustomerBalanceResponse, error) {
	out := new(SetCustomerBalanceResponse)
	err := c.cc.Invoke(ctx, CustomerCommandService_SetBalance_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerCommandServiceClient) ModifyBalance(ctx context.Context, in *ModifyCustomerBalanceRequest, opts ...grpc.CallOption) (*ModifyCustomerBalanceResponse, error) {
	out := new(ModifyCustomerBalanceResponse)
	err := c.cc.Invoke(ctx, CustomerCommandService_ModifyBalance_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerCommandServiceClient) Update(ctx context.Context, in *UpdateCustomerRequest, opts ...grpc.CallOption) (*UpdateCustomerResponse, error) {
	out := new(UpdateCustomerResponse)
	err := c.cc.Invoke(ctx, CustomerCommandService_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerCommandServiceClient) UpdatePassword(ctx context.Context, in *UpdateCustomerPasswordRequest, opts ...grpc.CallOption) (*UpdateCustomerPasswordResponse, error) {
	out := new(UpdateCustomerPasswordResponse)
	err := c.cc.Invoke(ctx, CustomerCommandService_UpdatePassword_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerCommandServiceClient) UpdatePhoto(ctx context.Context, in *UpdateCustomerPhotoRequest, opts ...grpc.CallOption) (*UpdateCustomerPhotoResponse, error) {
	out := new(UpdateCustomerPhotoResponse)
	err := c.cc.Invoke(ctx, CustomerCommandService_UpdatePhoto_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerCommandServiceClient) UpdateVoucher(ctx context.Context, in *UpdateCustomerVoucherRequest, opts ...grpc.CallOption) (*UpdateCustomerVoucherResponse, error) {
	out := new(UpdateCustomerVoucherResponse)
	err := c.cc.Invoke(ctx, CustomerCommandService_UpdateVoucher_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerCommandServiceClient) VerifyEmail(ctx context.Context, in *VerifyCustomerEmailRequest, opts ...grpc.CallOption) (*VerifyCustomerEmailResponse, error) {
	out := new(VerifyCustomerEmailResponse)
	err := c.cc.Invoke(ctx, CustomerCommandService_VerifyEmail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerCommandServiceClient) VerifyEmailInstantiate(ctx context.Context, in *VerifyCustomerEmailInstantiateRequest, opts ...grpc.CallOption) (*VerifyCustomerEmailInstantiateResponse, error) {
	out := new(VerifyCustomerEmailInstantiateResponse)
	err := c.cc.Invoke(ctx, CustomerCommandService_VerifyEmailInstantiate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CustomerCommandServiceServer is the server API for CustomerCommandService service.
// All implementations must embed UnimplementedCustomerCommandServiceServer
// for forward compatibility
type CustomerCommandServiceServer interface {
	AddAddress(context.Context, *AddCustomerAddressRequest) (*AddCustomerAddressResponse, error)
	AddVoucher(context.Context, *AddCustomerVoucherRequest) (*AddCustomerVoucherResponse, error)
	Create(context.Context, *CreateCustomerRequest) (*CreateCustomerResponse, error)
	DeleteAddress(context.Context, *DeleteCustomerAddressRequest) (*DeleteCustomerAddressResponse, error)
	DeleteVoucher(context.Context, *DeleteCustomerVoucherRequest) (*DeleteCustomerVoucherResponse, error)
	Disable(context.Context, *DisableCustomerRequest) (*DisableCustomerResponse, error)
	Enable(context.Context, *EnableCustomerRequest) (*EnableCustomerResponse, error)
	ForgotPasswordInstantiate(context.Context, *ForgotCustomerPasswordRequest) (*ForgotCustomerPasswordResponse, error)
	ResetPassword(context.Context, *ResetCustomerPasswordRequest) (*ResetCustomerPasswordResponse, error)
	SetDefaultAddress(context.Context, *SetCustomerDefaultAddressRequest) (*SetCustomerDefaultAddressResponse, error)
	UpdateAddress(context.Context, *UpdateCustomerAddressRequest) (*UpdateCustomerAddressResponse, error)
	SetBalance(context.Context, *SetCustomerBalanceRequest) (*SetCustomerBalanceResponse, error)
	ModifyBalance(context.Context, *ModifyCustomerBalanceRequest) (*ModifyCustomerBalanceResponse, error)
	Update(context.Context, *UpdateCustomerRequest) (*UpdateCustomerResponse, error)
	UpdatePassword(context.Context, *UpdateCustomerPasswordRequest) (*UpdateCustomerPasswordResponse, error)
	UpdatePhoto(context.Context, *UpdateCustomerPhotoRequest) (*UpdateCustomerPhotoResponse, error)
	UpdateVoucher(context.Context, *UpdateCustomerVoucherRequest) (*UpdateCustomerVoucherResponse, error)
	VerifyEmail(context.Context, *VerifyCustomerEmailRequest) (*VerifyCustomerEmailResponse, error)
	VerifyEmailInstantiate(context.Context, *VerifyCustomerEmailInstantiateRequest) (*VerifyCustomerEmailInstantiateResponse, error)
	mustEmbedUnimplementedCustomerCommandServiceServer()
}

// UnimplementedCustomerCommandServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCustomerCommandServiceServer struct {
}

func (UnimplementedCustomerCommandServiceServer) AddAddress(context.Context, *AddCustomerAddressRequest) (*AddCustomerAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddAddress not implemented")
}
func (UnimplementedCustomerCommandServiceServer) AddVoucher(context.Context, *AddCustomerVoucherRequest) (*AddCustomerVoucherResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddVoucher not implemented")
}
func (UnimplementedCustomerCommandServiceServer) Create(context.Context, *CreateCustomerRequest) (*CreateCustomerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedCustomerCommandServiceServer) DeleteAddress(context.Context, *DeleteCustomerAddressRequest) (*DeleteCustomerAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAddress not implemented")
}
func (UnimplementedCustomerCommandServiceServer) DeleteVoucher(context.Context, *DeleteCustomerVoucherRequest) (*DeleteCustomerVoucherResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteVoucher not implemented")
}
func (UnimplementedCustomerCommandServiceServer) Disable(context.Context, *DisableCustomerRequest) (*DisableCustomerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Disable not implemented")
}
func (UnimplementedCustomerCommandServiceServer) Enable(context.Context, *EnableCustomerRequest) (*EnableCustomerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Enable not implemented")
}
func (UnimplementedCustomerCommandServiceServer) ForgotPasswordInstantiate(context.Context, *ForgotCustomerPasswordRequest) (*ForgotCustomerPasswordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ForgotPasswordInstantiate not implemented")
}
func (UnimplementedCustomerCommandServiceServer) ResetPassword(context.Context, *ResetCustomerPasswordRequest) (*ResetCustomerPasswordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetPassword not implemented")
}
func (UnimplementedCustomerCommandServiceServer) SetDefaultAddress(context.Context, *SetCustomerDefaultAddressRequest) (*SetCustomerDefaultAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetDefaultAddress not implemented")
}
func (UnimplementedCustomerCommandServiceServer) UpdateAddress(context.Context, *UpdateCustomerAddressRequest) (*UpdateCustomerAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAddress not implemented")
}
func (UnimplementedCustomerCommandServiceServer) SetBalance(context.Context, *SetCustomerBalanceRequest) (*SetCustomerBalanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetBalance not implemented")
}
func (UnimplementedCustomerCommandServiceServer) ModifyBalance(context.Context, *ModifyCustomerBalanceRequest) (*ModifyCustomerBalanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModifyBalance not implemented")
}
func (UnimplementedCustomerCommandServiceServer) Update(context.Context, *UpdateCustomerRequest) (*UpdateCustomerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedCustomerCommandServiceServer) UpdatePassword(context.Context, *UpdateCustomerPasswordRequest) (*UpdateCustomerPasswordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePassword not implemented")
}
func (UnimplementedCustomerCommandServiceServer) UpdatePhoto(context.Context, *UpdateCustomerPhotoRequest) (*UpdateCustomerPhotoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePhoto not implemented")
}
func (UnimplementedCustomerCommandServiceServer) UpdateVoucher(context.Context, *UpdateCustomerVoucherRequest) (*UpdateCustomerVoucherResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateVoucher not implemented")
}
func (UnimplementedCustomerCommandServiceServer) VerifyEmail(context.Context, *VerifyCustomerEmailRequest) (*VerifyCustomerEmailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyEmail not implemented")
}
func (UnimplementedCustomerCommandServiceServer) VerifyEmailInstantiate(context.Context, *VerifyCustomerEmailInstantiateRequest) (*VerifyCustomerEmailInstantiateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyEmailInstantiate not implemented")
}
func (UnimplementedCustomerCommandServiceServer) mustEmbedUnimplementedCustomerCommandServiceServer() {
}

// UnsafeCustomerCommandServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CustomerCommandServiceServer will
// result in compilation errors.
type UnsafeCustomerCommandServiceServer interface {
	mustEmbedUnimplementedCustomerCommandServiceServer()
}

func RegisterCustomerCommandServiceServer(s grpc.ServiceRegistrar, srv CustomerCommandServiceServer) {
	s.RegisterService(&CustomerCommandService_ServiceDesc, srv)
}

func _CustomerCommandService_AddAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddCustomerAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerCommandServiceServer).AddAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CustomerCommandService_AddAddress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerCommandServiceServer).AddAddress(ctx, req.(*AddCustomerAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerCommandService_AddVoucher_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddCustomerVoucherRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerCommandServiceServer).AddVoucher(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CustomerCommandService_AddVoucher_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerCommandServiceServer).AddVoucher(ctx, req.(*AddCustomerVoucherRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerCommandService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCustomerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerCommandServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CustomerCommandService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerCommandServiceServer).Create(ctx, req.(*CreateCustomerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerCommandService_DeleteAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCustomerAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerCommandServiceServer).DeleteAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CustomerCommandService_DeleteAddress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerCommandServiceServer).DeleteAddress(ctx, req.(*DeleteCustomerAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerCommandService_DeleteVoucher_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCustomerVoucherRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerCommandServiceServer).DeleteVoucher(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CustomerCommandService_DeleteVoucher_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerCommandServiceServer).DeleteVoucher(ctx, req.(*DeleteCustomerVoucherRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerCommandService_Disable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DisableCustomerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerCommandServiceServer).Disable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CustomerCommandService_Disable_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerCommandServiceServer).Disable(ctx, req.(*DisableCustomerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerCommandService_Enable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnableCustomerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerCommandServiceServer).Enable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CustomerCommandService_Enable_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerCommandServiceServer).Enable(ctx, req.(*EnableCustomerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerCommandService_ForgotPasswordInstantiate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ForgotCustomerPasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerCommandServiceServer).ForgotPasswordInstantiate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CustomerCommandService_ForgotPasswordInstantiate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerCommandServiceServer).ForgotPasswordInstantiate(ctx, req.(*ForgotCustomerPasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerCommandService_ResetPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetCustomerPasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerCommandServiceServer).ResetPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CustomerCommandService_ResetPassword_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerCommandServiceServer).ResetPassword(ctx, req.(*ResetCustomerPasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerCommandService_SetDefaultAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetCustomerDefaultAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerCommandServiceServer).SetDefaultAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CustomerCommandService_SetDefaultAddress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerCommandServiceServer).SetDefaultAddress(ctx, req.(*SetCustomerDefaultAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerCommandService_UpdateAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCustomerAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerCommandServiceServer).UpdateAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CustomerCommandService_UpdateAddress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerCommandServiceServer).UpdateAddress(ctx, req.(*UpdateCustomerAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerCommandService_SetBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetCustomerBalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerCommandServiceServer).SetBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CustomerCommandService_SetBalance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerCommandServiceServer).SetBalance(ctx, req.(*SetCustomerBalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerCommandService_ModifyBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModifyCustomerBalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerCommandServiceServer).ModifyBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CustomerCommandService_ModifyBalance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerCommandServiceServer).ModifyBalance(ctx, req.(*ModifyCustomerBalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerCommandService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCustomerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerCommandServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CustomerCommandService_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerCommandServiceServer).Update(ctx, req.(*UpdateCustomerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerCommandService_UpdatePassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCustomerPasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerCommandServiceServer).UpdatePassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CustomerCommandService_UpdatePassword_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerCommandServiceServer).UpdatePassword(ctx, req.(*UpdateCustomerPasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerCommandService_UpdatePhoto_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCustomerPhotoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerCommandServiceServer).UpdatePhoto(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CustomerCommandService_UpdatePhoto_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerCommandServiceServer).UpdatePhoto(ctx, req.(*UpdateCustomerPhotoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerCommandService_UpdateVoucher_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCustomerVoucherRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerCommandServiceServer).UpdateVoucher(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CustomerCommandService_UpdateVoucher_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerCommandServiceServer).UpdateVoucher(ctx, req.(*UpdateCustomerVoucherRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerCommandService_VerifyEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyCustomerEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerCommandServiceServer).VerifyEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CustomerCommandService_VerifyEmail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerCommandServiceServer).VerifyEmail(ctx, req.(*VerifyCustomerEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerCommandService_VerifyEmailInstantiate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyCustomerEmailInstantiateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerCommandServiceServer).VerifyEmailInstantiate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CustomerCommandService_VerifyEmailInstantiate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerCommandServiceServer).VerifyEmailInstantiate(ctx, req.(*VerifyCustomerEmailInstantiateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CustomerCommandService_ServiceDesc is the grpc.ServiceDesc for CustomerCommandService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CustomerCommandService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rashop.customer.v1.CustomerCommandService",
	HandlerType: (*CustomerCommandServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddAddress",
			Handler:    _CustomerCommandService_AddAddress_Handler,
		},
		{
			MethodName: "AddVoucher",
			Handler:    _CustomerCommandService_AddVoucher_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _CustomerCommandService_Create_Handler,
		},
		{
			MethodName: "DeleteAddress",
			Handler:    _CustomerCommandService_DeleteAddress_Handler,
		},
		{
			MethodName: "DeleteVoucher",
			Handler:    _CustomerCommandService_DeleteVoucher_Handler,
		},
		{
			MethodName: "Disable",
			Handler:    _CustomerCommandService_Disable_Handler,
		},
		{
			MethodName: "Enable",
			Handler:    _CustomerCommandService_Enable_Handler,
		},
		{
			MethodName: "ForgotPasswordInstantiate",
			Handler:    _CustomerCommandService_ForgotPasswordInstantiate_Handler,
		},
		{
			MethodName: "ResetPassword",
			Handler:    _CustomerCommandService_ResetPassword_Handler,
		},
		{
			MethodName: "SetDefaultAddress",
			Handler:    _CustomerCommandService_SetDefaultAddress_Handler,
		},
		{
			MethodName: "UpdateAddress",
			Handler:    _CustomerCommandService_UpdateAddress_Handler,
		},
		{
			MethodName: "SetBalance",
			Handler:    _CustomerCommandService_SetBalance_Handler,
		},
		{
			MethodName: "ModifyBalance",
			Handler:    _CustomerCommandService_ModifyBalance_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _CustomerCommandService_Update_Handler,
		},
		{
			MethodName: "UpdatePassword",
			Handler:    _CustomerCommandService_UpdatePassword_Handler,
		},
		{
			MethodName: "UpdatePhoto",
			Handler:    _CustomerCommandService_UpdatePhoto_Handler,
		},
		{
			MethodName: "UpdateVoucher",
			Handler:    _CustomerCommandService_UpdateVoucher_Handler,
		},
		{
			MethodName: "VerifyEmail",
			Handler:    _CustomerCommandService_VerifyEmail_Handler,
		},
		{
			MethodName: "VerifyEmailInstantiate",
			Handler:    _CustomerCommandService_VerifyEmailInstantiate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "customer/v1/customer_command.proto",
}

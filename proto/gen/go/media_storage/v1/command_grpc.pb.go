// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: media_storage/v1/command.proto

package mediav1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	MediaStorageCommandService_Store_FullMethodName  = "/rashop.media.v1.MediaStorageCommandService/Store"
	MediaStorageCommandService_Delete_FullMethodName = "/rashop.media.v1.MediaStorageCommandService/Delete"
)

// MediaStorageCommandServiceClient is the client API for MediaStorageCommandService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MediaStorageCommandServiceClient interface {
	Store(ctx context.Context, opts ...grpc.CallOption) (MediaStorageCommandService_StoreClient, error)
	Delete(ctx context.Context, in *DeleteMediaRequest, opts ...grpc.CallOption) (*DeleteMediaResponse, error)
}

type mediaStorageCommandServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMediaStorageCommandServiceClient(cc grpc.ClientConnInterface) MediaStorageCommandServiceClient {
	return &mediaStorageCommandServiceClient{cc}
}

func (c *mediaStorageCommandServiceClient) Store(ctx context.Context, opts ...grpc.CallOption) (MediaStorageCommandService_StoreClient, error) {
	stream, err := c.cc.NewStream(ctx, &MediaStorageCommandService_ServiceDesc.Streams[0], MediaStorageCommandService_Store_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &mediaStorageCommandServiceStoreClient{stream}
	return x, nil
}

type MediaStorageCommandService_StoreClient interface {
	Send(*StoreMediaRequest) error
	CloseAndRecv() (*StoreMediaResponse, error)
	grpc.ClientStream
}

type mediaStorageCommandServiceStoreClient struct {
	grpc.ClientStream
}

func (x *mediaStorageCommandServiceStoreClient) Send(m *StoreMediaRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *mediaStorageCommandServiceStoreClient) CloseAndRecv() (*StoreMediaResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(StoreMediaResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *mediaStorageCommandServiceClient) Delete(ctx context.Context, in *DeleteMediaRequest, opts ...grpc.CallOption) (*DeleteMediaResponse, error) {
	out := new(DeleteMediaResponse)
	err := c.cc.Invoke(ctx, MediaStorageCommandService_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MediaStorageCommandServiceServer is the server API for MediaStorageCommandService service.
// All implementations must embed UnimplementedMediaStorageCommandServiceServer
// for forward compatibility
type MediaStorageCommandServiceServer interface {
	Store(MediaStorageCommandService_StoreServer) error
	Delete(context.Context, *DeleteMediaRequest) (*DeleteMediaResponse, error)
	mustEmbedUnimplementedMediaStorageCommandServiceServer()
}

// UnimplementedMediaStorageCommandServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMediaStorageCommandServiceServer struct {
}

func (UnimplementedMediaStorageCommandServiceServer) Store(MediaStorageCommandService_StoreServer) error {
	return status.Errorf(codes.Unimplemented, "method Store not implemented")
}
func (UnimplementedMediaStorageCommandServiceServer) Delete(context.Context, *DeleteMediaRequest) (*DeleteMediaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedMediaStorageCommandServiceServer) mustEmbedUnimplementedMediaStorageCommandServiceServer() {
}

// UnsafeMediaStorageCommandServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MediaStorageCommandServiceServer will
// result in compilation errors.
type UnsafeMediaStorageCommandServiceServer interface {
	mustEmbedUnimplementedMediaStorageCommandServiceServer()
}

func RegisterMediaStorageCommandServiceServer(s grpc.ServiceRegistrar, srv MediaStorageCommandServiceServer) {
	s.RegisterService(&MediaStorageCommandService_ServiceDesc, srv)
}

func _MediaStorageCommandService_Store_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MediaStorageCommandServiceServer).Store(&mediaStorageCommandServiceStoreServer{stream})
}

type MediaStorageCommandService_StoreServer interface {
	SendAndClose(*StoreMediaResponse) error
	Recv() (*StoreMediaRequest, error)
	grpc.ServerStream
}

type mediaStorageCommandServiceStoreServer struct {
	grpc.ServerStream
}

func (x *mediaStorageCommandServiceStoreServer) SendAndClose(m *StoreMediaResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *mediaStorageCommandServiceStoreServer) Recv() (*StoreMediaRequest, error) {
	m := new(StoreMediaRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _MediaStorageCommandService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMediaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MediaStorageCommandServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MediaStorageCommandService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MediaStorageCommandServiceServer).Delete(ctx, req.(*DeleteMediaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MediaStorageCommandService_ServiceDesc is the grpc.ServiceDesc for MediaStorageCommandService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MediaStorageCommandService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rashop.media.v1.MediaStorageCommandService",
	HandlerType: (*MediaStorageCommandServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Delete",
			Handler:    _MediaStorageCommandService_Delete_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Store",
			Handler:       _MediaStorageCommandService_Store_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "media_storage/v1/command.proto",
}

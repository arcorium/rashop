// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: media_storage/v1/query.proto

package mediav1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	MediaStorageQueryService_Get_FullMethodName         = "/rashop.media.v1.MediaStorageQueryService/Get"
	MediaStorageQueryService_GetMetadata_FullMethodName = "/rashop.media.v1.MediaStorageQueryService/GetMetadata"
)

// MediaStorageQueryServiceClient is the client API for MediaStorageQueryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MediaStorageQueryServiceClient interface {
	Get(ctx context.Context, in *GetMediaRequest, opts ...grpc.CallOption) (MediaStorageQueryService_GetClient, error)
	GetMetadata(ctx context.Context, in *GetMediaMetadataRequest, opts ...grpc.CallOption) (*GetMediaMetadataResponse, error)
}

type mediaStorageQueryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMediaStorageQueryServiceClient(cc grpc.ClientConnInterface) MediaStorageQueryServiceClient {
	return &mediaStorageQueryServiceClient{cc}
}

func (c *mediaStorageQueryServiceClient) Get(ctx context.Context, in *GetMediaRequest, opts ...grpc.CallOption) (MediaStorageQueryService_GetClient, error) {
	stream, err := c.cc.NewStream(ctx, &MediaStorageQueryService_ServiceDesc.Streams[0], MediaStorageQueryService_Get_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &mediaStorageQueryServiceGetClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MediaStorageQueryService_GetClient interface {
	Recv() (*GetMediaResponse, error)
	grpc.ClientStream
}

type mediaStorageQueryServiceGetClient struct {
	grpc.ClientStream
}

func (x *mediaStorageQueryServiceGetClient) Recv() (*GetMediaResponse, error) {
	m := new(GetMediaResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *mediaStorageQueryServiceClient) GetMetadata(ctx context.Context, in *GetMediaMetadataRequest, opts ...grpc.CallOption) (*GetMediaMetadataResponse, error) {
	out := new(GetMediaMetadataResponse)
	err := c.cc.Invoke(ctx, MediaStorageQueryService_GetMetadata_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MediaStorageQueryServiceServer is the server API for MediaStorageQueryService service.
// All implementations must embed UnimplementedMediaStorageQueryServiceServer
// for forward compatibility
type MediaStorageQueryServiceServer interface {
	Get(*GetMediaRequest, MediaStorageQueryService_GetServer) error
	GetMetadata(context.Context, *GetMediaMetadataRequest) (*GetMediaMetadataResponse, error)
	mustEmbedUnimplementedMediaStorageQueryServiceServer()
}

// UnimplementedMediaStorageQueryServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMediaStorageQueryServiceServer struct {
}

func (UnimplementedMediaStorageQueryServiceServer) Get(*GetMediaRequest, MediaStorageQueryService_GetServer) error {
	return status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedMediaStorageQueryServiceServer) GetMetadata(context.Context, *GetMediaMetadataRequest) (*GetMediaMetadataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMetadata not implemented")
}
func (UnimplementedMediaStorageQueryServiceServer) mustEmbedUnimplementedMediaStorageQueryServiceServer() {
}

// UnsafeMediaStorageQueryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MediaStorageQueryServiceServer will
// result in compilation errors.
type UnsafeMediaStorageQueryServiceServer interface {
	mustEmbedUnimplementedMediaStorageQueryServiceServer()
}

func RegisterMediaStorageQueryServiceServer(s grpc.ServiceRegistrar, srv MediaStorageQueryServiceServer) {
	s.RegisterService(&MediaStorageQueryService_ServiceDesc, srv)
}

func _MediaStorageQueryService_Get_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetMediaRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MediaStorageQueryServiceServer).Get(m, &mediaStorageQueryServiceGetServer{stream})
}

type MediaStorageQueryService_GetServer interface {
	Send(*GetMediaResponse) error
	grpc.ServerStream
}

type mediaStorageQueryServiceGetServer struct {
	grpc.ServerStream
}

func (x *mediaStorageQueryServiceGetServer) Send(m *GetMediaResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _MediaStorageQueryService_GetMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMediaMetadataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MediaStorageQueryServiceServer).GetMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MediaStorageQueryService_GetMetadata_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MediaStorageQueryServiceServer).GetMetadata(ctx, req.(*GetMediaMetadataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MediaStorageQueryService_ServiceDesc is the grpc.ServiceDesc for MediaStorageQueryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MediaStorageQueryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rashop.media.v1.MediaStorageQueryService",
	HandlerType: (*MediaStorageQueryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetMetadata",
			Handler:    _MediaStorageQueryService_GetMetadata_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Get",
			Handler:       _MediaStorageQueryService_Get_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "media_storage/v1/query.proto",
}
